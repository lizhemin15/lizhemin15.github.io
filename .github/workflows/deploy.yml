name: Deploy pages

on:
  workflow_dispatch: {}
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Generate blogs.json
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          // 读取 blogs 文件夹中的所有 .md 文件
          const blogsDir = './blogs';
          
          if (!fs.existsSync(blogsDir)) {
            console.log('blogs 文件夹不存在，跳过生成');
            process.exit(0);
          }
          
          // 解析 front matter 的简单函数
          function parseFrontMatter(content) {
            const frontMatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
            const match = content.match(frontMatterRegex);
            
            if (!match) return null;
            
            const frontMatter = {};
            const lines = match[1].split('\n');
            
            for (const line of lines) {
              const colonIndex = line.indexOf(':');
              if (colonIndex > 0) {
                const key = line.substring(0, colonIndex).trim();
                let value = line.substring(colonIndex + 1).trim();
                
                // 移除引号
                if ((value.startsWith('\"') && value.endsWith('\"')) || 
                    (value.startsWith(\"'\") && value.endsWith(\"'\"))) {
                  value = value.slice(1, -1);
                }
                
                // 处理布尔值
                if (value === 'true') value = true;
                if (value === 'false') value = false;
                
                frontMatter[key] = value;
              }
            }
            
            return frontMatter;
          }
          
          // 获取所有 .md 文件，排除 README.md
          const allFiles = fs.readdirSync(blogsDir)
            .filter(file => file.endsWith('.md') && file !== 'README.md');
          
          // 解析每个文件，检查 visible 字段
          const blogFiles = [];
          const fileInfo = [];
          
          for (const file of allFiles) {
            try {
              const filePath = path.join(blogsDir, file);
              const content = fs.readFileSync(filePath, 'utf8');
              const frontMatter = parseFrontMatter(content);
              
              // 如果没有 front matter 或者 visible 不是 false，则包含该文件
              const isVisible = !frontMatter || frontMatter.visible !== false;
              
              if (isVisible) {
                blogFiles.push(file);
                fileInfo.push({
                  file: file,
                  date: frontMatter?.date || '1970-01-01',
                  title: frontMatter?.title || file
                });
              } else {
                console.log('跳过隐藏的博客文件：', file);
              }
            } catch (error) {
              console.warn('解析文件失败：', file, error.message);
              // 如果解析失败，默认包含该文件
              blogFiles.push(file);
            }
          }
          
          // 按日期排序（最新的在前）
          fileInfo.sort((a, b) => new Date(b.date) - new Date(a.date));
          const sortedFiles = fileInfo.map(info => info.file);
          
          console.log('发现博客文件：', sortedFiles);
          console.log('总计：', sortedFiles.length, '个可见博客文件，', allFiles.length - sortedFiles.length, '个隐藏文件');
          
          // 生成 blogs.json
          const blogsJson = {
            blogs: sortedFiles
          };
          
          // 写入 blogs.json 文件
          fs.writeFileSync('./blogs.json', JSON.stringify(blogsJson, null, 2));
          console.log('成功生成 blogs.json');
          "

      - name: Verify blogs.json generation
        run: |
          echo "检查 blogs.json 文件是否生成..."
          if [ -f "./blogs.json" ]; then
            echo "✓ blogs.json 文件已生成"
            echo "文件大小: $(stat -c%s ./blogs.json) bytes"
            echo "文件内容:"
            cat ./blogs.json
          else
            echo "✗ blogs.json 文件未找到"
            exit 1
          fi
          
          echo ""
          echo "检查当前目录所有文件..."
          ls -la

      - uses: actions/configure-pages@v4

      - name: Prepare deployment files
        run: |
          echo "准备部署文件..."
          echo "当前目录内容："
          find . -maxdepth 2 -type f -name "*.json" -o -name "*.html" -o -name "*.md" | head -20
          
          echo ""
          echo "验证关键文件存在："
          [ -f "./index.html" ] && echo "✓ index.html 存在" || echo "✗ index.html 缺失"
          [ -f "./blogs.json" ] && echo "✓ blogs.json 存在" || echo "✗ blogs.json 缺失"
          [ -d "./blogs" ] && echo "✓ blogs/ 目录存在" || echo "✗ blogs/ 目录缺失"

      - uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4